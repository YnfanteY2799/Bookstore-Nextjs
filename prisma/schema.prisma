// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement()) @db.Integer
  username        String    @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  hashed_password String    @db.VarChar(255)
  favorite_books  Book[]
  create_time     DateTime? @default(now()) @db.Date
  update_time     DateTime? @db.Date
}

model Authors {
  id          Int       @id @default(autoincrement()) @db.Integer
  fore_name   String    @db.VarChar(255)
  sur_name    String    @db.VarChar(255)
  birth_date  DateTime
  create_time DateTime? @default(now()) @db.Date
  update_time DateTime? @db.Date
  Books       Book[]
}

model Genre {
  id          Int       @id @default(autoincrement()) @db.Integer
  name        String    @db.VarChar(255)
  create_time DateTime? @default(now()) @db.Date
  update_time DateTime? @db.Date
  Book        Book[]
}

model Book {
  id          Int       @id @default(autoincrement()) @db.Integer
  title       String    @db.VarChar(255)
  year        DateTime
  coverImage  String?
  totalRating Int       @default(0)
  author_id   Int       @db.Integer
  genres_ids  Int       @db.Integer
  create_time DateTime? @default(now()) @db.Date
  update_time DateTime? @db.Date
  Authors     Authors   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  Genres      Genre     @relation(fields: [genres_ids], references: [id], onDelete: Cascade)
  User        User[]
  Reviews     Reviews[]
}

model Reviews {
  id          Int       @id @default(autoincrement()) @db.Integer
  rating      Int       @default(0) @db.Integer
  comment     String?   @db.VarChar(255)
  book_id     Int       @db.Integer
  create_time DateTime? @default(now()) @db.Date
  update_time DateTime? @db.Date
  Book        Book      @relation(fields: [book_id], references: [id], onDelete: Cascade)
}
